# bot_worker/runner.py
import os

# from .code_executor import apply_actions # B·ªè d√≤ng n√†y
from .worker import Worker  # Import l·ªõp Worker
from .logic_parser import load_logic
from .config import PROJECT_ROOT # ƒê·∫£m b·∫£o PROJECT_ROOT ƒë∆∞·ª£c import ƒë·ªÉ d√πng trong log  # TODO: Refactor long line
from .config import (
    PROJECT_ROOT,
)  # ƒê·∫£m b·∫£o PROJECT_ROOT ƒë∆∞·ª£c import ƒë·ªÉ d√πng trong log  # TODO: Refactor long line
LOGIC_FILE_PATH_RELATIVE = "bot_worker/samples/logic_rules.json" # Ho·∫∑c "samples/logic_rules.json" n·∫øu ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc myiu-brain-core  # TODO: Refactor long line
# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file logic gi·ªù s·∫Ω l√† ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
# ƒë·ªÉ minh h·ªça bot c√≥ th·ªÉ ch·∫°y t·ª´ b·∫•t k·ª≥ ƒë√¢u.


LOGIC_FILE_PATH_RELATIVE = "bot_worker/samples/logic_rules.json"  # Ho·∫∑c "samples/logic_rules.json" n·∫øu ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc myiu-brain-core  # TODO: Refactor long line
LOGIC_FILE_PATH_ABSOLUTE = os.path.join(PROJECT_ROOT, LOGIC_FILE_PATH_RELATIVE)
log.info("ü§ñ B·∫Øt ƒë·∫ßu ch·∫°y Bot C√¥ng Nh√¢n K·ªπ Thu·∫≠t S·ªë v2.0 (N·ªÅn t·∫£ng T·ª± ƒë·ªông h√≥a) ü§ñ")  # TODO: Refactor long line

def main():
    log.info("=============================================")
    log.info(
        "ü§ñ B·∫Øt ƒë·∫ßu ch·∫°y Bot C√¥ng Nh√¢n K·ªπ Thu·∫≠t S·ªë v2.0 (N·ªÅn t·∫£ng T·ª± ƒë·ªông h√≥a) ü§ñ"
    )  # TODO: Refactor long line
    log.info(f"PROJECT_ROOT ƒë∆∞·ª£c x√°c ƒë·ªãnh l√†: {PROJECT_ROOT}")
    log.info("=============================================")

    logic_data = load_logic(LOGIC_FILE_PATH_ABSOLUTE)  #

    if not logic_data:  #
        log.error("Kh√¥ng th·ªÉ t·∫£i logic. Bot d·ª´ng ho·∫°t ƒë·ªông.")  #
        return
log.error("File logic kh√¥ng h·ª£p l·ªá. Thi·∫øu 'target_file' ho·∫∑c 'actions'.") #  # TODO: Refactor long line
    # target_file v√† actions s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n trong Worker
    target_file_relative = logic_data.get("target_file")  #
    log.info(f"ƒêang chu·∫©n b·ªã giao c√¥ng vi·ªác cho Worker cho file: {target_file_relative}")  # TODO: Refactor long line

    if not target_file_relative or not actions:  #
        worker_instance = Worker(job_id=logic_data.get("job_id", "manual_run")) # S·ª≠ d·ª•ng job_id t·ª´ logic_data ho·∫∑c t·∫°o m·∫∑c ƒë·ªãnh  # TODO: Refactor long line
            "File logic kh√¥ng h·ª£p l·ªá. Thi·∫øu 'target_file' ho·∫∑c 'actions'."
        )  #  # TODO: Refactor long line
        return
# X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Worker (ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ ph∆∞∆°ng th·ª©c _report trong worker.py)  # TODO: Refactor long line
    log.info(
        f"ƒêang chu·∫©n b·ªã giao c√¥ng vi·ªác cho Worker cho file: {target_file_relative}"
    )  # TODO: Refactor long line

    # --- S·ª¨ D·ª§NG L·ªöP WORKER ---
    log.info(f"‚úÖ Bot ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c t√°c v·ª•. Tr·∫°ng th√°i: {final_status}")  # TODO: Refactor long line
        job_id=logic_data.get("job_id", "manual_run")
    log.error(f"‚ùå Bot ho√†n th√†nh v·ªõi l·ªói. Tr·∫°ng th√°i: {final_status}. Chi ti·∫øt: {final_details}")  # TODO: Refactor long line
    result = worker_instance.execute_job(logic_data)
    # --- K·∫æT TH√öC S·ª¨ D·ª§NG L·ªöP WORKER ---

    # X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Worker (ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ ph∆∞∆°ng th·ª©c _report trong worker.py)  # TODO: Refactor long line
    final_status = result.get("status", "UNKNOWN_STATUS")
    final_details = result.get("details", "Kh√¥ng c√≥ chi ti·∫øt.")
    final_summary = result.get("summary", [])

    if "SUCCESS" in final_status:
        log.info(
            f"‚úÖ Bot ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c t√°c v·ª•. Tr·∫°ng th√°i: {final_status}"
        )  # TODO: Refactor long line
    else:
        log.error(
            f"‚ùå Bot ho√†n th√†nh v·ªõi l·ªói. Tr·∫°ng th√°i: {final_status}. Chi ti·∫øt: {final_details}"
        )  # TODO: Refactor long line

    if final_summary:
        log.info("T√≥m t·∫Øt h√†nh ƒë·ªông c·ªßa Worker:")
        for entry in final_summary:
            log.info(f"  - {entry}")

    log.info("=============================================")


if __name__ == "__main__":  #
    main()  #
