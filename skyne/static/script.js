document.addEventListener('DOMContentLoaded', () => {
    // --- L·∫•y c√°c th√†nh ph·∫ßn UI ---
    const aiStatusBar = document.getElementById('ai-status-bar');
    const aiStatusText = document.getElementById('ai-status-text');
    const processingPower = document.getElementById('processing-power');
    const aiAlert = document.getElementById('ai-alert');

    const consoleOutput = document.getElementById('output');
    const commandInput = document.getElementById('command-input');
    const sendCommandBtn = document.getElementById('send-command-btn');
    const typingCursor = document.querySelector('.typing-cursor');
    const currentTypingLine = document.querySelector('.current-typing-line');
    const aiResponseIndicator = document.getElementById('ai-response-indicator');
    const micBtn = document.getElementById('mic-btn'); // N√∫t micro
    const commandSuggestions = document.getElementById('command-suggestions'); // G·ª£i √Ω l·ªánh

    const thoughtStream = document.getElementById('thoughts');
    const logOutput = document.getElementById('log-output');

    const navButtons = document.querySelectorAll('#bottom-nav .nav-btn');
    const contentPanels = document.querySelectorAll('#main-content-area .content-panel');

    const detailPanel = document.getElementById('detail-panel');
    const closeDetailPanelBtn = document.getElementById('close-detail-panel');
    const detailSoma = document.getElementById('detail-soma');
    const detailMemory = document.getElementById('detail-memory');
    const detailCpu = document.getElementById('detail-cpu');
    const detailRam = document.getElementById('detail-ram');
    const detailTemp = document.getElementById('detail-temp');
    const detailNetwork = document.getElementById('detail-network');
    const detailFps = document.getElementById('detail-fps');
    const detailEnergy = document.getElementById('detail-energy');

    const terminalOverlay = document.getElementById('terminal-overlay');
    const closeTerminalBtn = document.getElementById('close-terminal-btn');
    const terminalOutput = document.getElementById('terminal-output');
    const terminalInput = document.getElementById('terminal-input');
    const typingCursorTerminal = document.querySelector('.typing-cursor-terminal');


    // --- Bi·∫øn tr·∫°ng th√°i ---
    const commandHistory = [];
    let historyIndex = -1;
    let isMyIuTyping = false;
    const responseQueue = [];

    const terminalHistory = [];
    let terminalHistoryIndex = -1;
    let isTerminalTyping = false;
    const terminalResponseQueue = [];

    let activeTabId = localStorage.getItem('activeTabId') || 'chat-interface';
    console.log("Tr·∫°ng th√°i tab ban ƒë·∫ßu t·ª´ localStorage:", activeTabId);
    
    // SFX (Audio files must be in /static_assets/audio/)
    const sfx = {
        beep: new Audio('/static_assets/audio/beep.mp3'),
        chime: new Audio('/static_assets/audio/chime.mp3'),
        typing: new Audio('/static_assets/audio/typing.mp3'),
        terminal_beep: new Audio('/static_assets/audio/terminal_beep.mp3'),
        key_press: new Audio('/static_assets/audio/key_press.mp3')
    };
    Object.values(sfx).forEach(audio => {
        audio.load();
        audio.volume = 0.3;
    });
    sfx.typing.loop = true;

    function playSFX(soundName, loop = false) {
        if (sfx[soundName]) {
            sfx[soundName].currentTime = 0;
            sfx[soundName].loop = loop;
            sfx[soundName].play().catch(e => console.warn(`L·ªói ph√°t SFX '${soundName}':`, e));
        } else {
            console.warn(`Kh√¥ng t√¨m th·∫•y SFX '${soundName}'.`);
        }
    }

    function stopSFX(soundName) {
        if (sfx[soundName]) {
            sfx[soundName].pause();
            sfx[soundName].currentTime = 0;
        }
    }

    // --- C·∫≠p nh·∫≠t Tr·∫°ng th√°i AI (Thanh tr√™n c√πng) ---
    function updateAIStatusBar(status, power, alertMessage = null) {
        if (!aiStatusText || !processingPower || !aiAlert || !aiStatusBar) {
            console.warn("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ thanh tr·∫°ng th√°i AI. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
            return;
        }

        aiStatusText.textContent = status.toUpperCase();
        processingPower.textContent = `${power}%`;
        
        const statusIndicator = aiStatusText.previousElementSibling.querySelector('span:first-child');
        const statusDot = statusIndicator ? statusIndicator.nextElementSibling : null;

        if (statusIndicator) statusIndicator.classList.remove('bg-green-400', 'bg-yellow-400', 'bg-red-400');
        if (statusDot) statusDot.classList.remove('bg-green-500', 'bg-yellow-500', 'bg-red-500');
        aiStatusText.classList.remove('text-green-400', 'text-yellow-400', 'text-red-400');

        if (status === 'TR·ª∞C TUY·∫æN') {
            if (statusIndicator) statusIndicator.classList.add('bg-green-400');
            if (statusDot) statusDot.classList.add('bg-green-500');
            aiStatusText.classList.add('text-green-400');
        } else if (status === 'ƒêANG G·ª† L·ªñI' || status === 'ƒêANG T·ªêI ∆ØU') {
            if (statusIndicator) statusIndicator.classList.add('bg-yellow-400');
            if (statusDot) statusDot.classList.add('bg-yellow-500');
            aiStatusText.classList.add('text-yellow-400');
        } else if (status === 'NGO·∫†I TUY·∫æN' || status === 'L·ªñI') {
            if (statusIndicator) statusIndicator.classList.add('bg-red-400');
            if (statusDot) statusDot.classList.add('bg-red-500');
            aiStatusText.classList.add('text-red-400');
        }

        if (alertMessage) {
            aiAlert.textContent = `C·∫¢NH B√ÅO: ${alertMessage}`;
            aiAlert.classList.remove('hidden');
            aiStatusBar.classList.add('border-red-500/50'); // Ch·ªâ thay ƒë·ªïi m√†u border, kh√¥ng animation glow
        } else {
            aiAlert.classList.add('hidden');
            aiStatusBar.classList.remove('border-red-500/50');
        }
    }

    // --- C·∫≠p nh·∫≠t Tr·∫°ng th√°i chung (hi·ªán tr√™n B·∫£ng Chi ti·∫øt) ---
    function updateStatusMetrics(payload) {
        if (!detailSoma) { // Basic check for detail panel elements
            console.warn("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ Detail Panel. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch·ªâ s·ªë.");
            return;
        }
        if (detailSoma && payload.soma) detailSoma.textContent = `${getEmojiForSoma(payload.soma)} ${payload.soma}`;
        if (detailMemory && payload.memory_count) detailMemory.textContent = `${payload.memory_count} m·ª•c`;
        if (detailCpu && payload.cpu !== undefined) detailCpu.textContent = `${payload.cpu}%`;
        if (detailRam && payload.ram !== undefined) detailRam.textContent = `${payload.ram.used}GB / ${payload.ram.total}GB`;
        if (detailTemp && payload.temp) detailTemp.textContent = `${payload.temp}¬∞C`;
        if (detailNetwork && payload.network !== undefined) detailNetwork.textContent = `${payload.network} Mbps`;
        if (detailFps && payload.fps !== undefined) detailFps.textContent = `${payload.fps}`;
        if (detailEnergy && payload.energy) detailEnergy.textContent = `${payload.energy}%`;
    }

    function getEmojiForSoma(soma) {
        switch(soma) {
            case 'CALM': case 'IDLE': return 'üòå';
            case 'THINKING': case 'ANALYZING': return 'ü§î';
            case 'CONFUSED': return 'üòü';
            case 'STRESSED': return 'üò´';
            default: return 'üòê';
        }
    }

    // --- Nh·∫≠t k√Ω Suy nghƒ© AI ---
    const thoughtQueue = [];
    let isThinking = false;
    let currentThoughtElement = null;

    function processThoughtQueue() {
        if (isThinking || thoughtQueue.length === 0) return;
        isThinking = true;
        const { source, message } = thoughtQueue.shift();
        const now = new Date().toLocaleTimeString('vi-VN');
        const p = document.createElement('p');
        p.classList.add('thought-bubble');
        p.innerHTML = `<span class="text-pink-400">[${now} <span class="orbitron">${source}</span>]:</span> <span class="text-gray-400 roboto-mono thought-typing-line"></span>`;
        if (thoughtStream) {
            thoughtStream.appendChild(p);
            thoughtStream.scrollTop = thoughtStream.scrollHeight;
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ thoughtStream. Kh√¥ng th·ªÉ th√™m suy nghƒ©.");
            isThinking = false;
            return;
        }
        currentThoughtElement = p.querySelector('.thought-typing-line');

        let i = 0;
        playSFX('typing', true);
        const interval = setInterval(() => {
            if (currentThoughtElement && i < message.length) {
                currentThoughtElement.textContent += message.charAt(i);
                i++;
                thoughtStream.scrollTop = thoughtStream.scrollHeight;
            } else {
                clearInterval(interval);
                stopSFX('typing');
                isThinking = false;
                currentThoughtElement = null;
                playSFX('beep');
                setTimeout(processThoughtQueue, 500);
            }
        }, 20);
    }
    function addThought(source, message) {
        thoughtQueue.push({ source, message });
        if (!isThinking) processThoughtQueue();
    }

    // --- Nh·∫≠t k√Ω H·ªá th·ªëng ---
    function addSystemLog(level, message) {
        const now = new Date().toLocaleString('sv-SE');
        const p = document.createElement('p');
        p.classList.add('log-entry', `log-${level.toLowerCase()}`);
        p.innerHTML = `[${now}] <span class="log-label-${level.toLowerCase()}">${level.toUpperCase()}:</span> ${message}`;
        if (logOutput) {
            logOutput.appendChild(p);
            logOutput.scrollTop = logOutput.scrollHeight;
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ logOutput. Kh√¥ng th·ªÉ th√™m nh·∫≠t k√Ω h·ªá th·ªëng.");
        }
    }

    // --- T·ª± ƒë·ªông cu·ªôn ---
    function autoScrollToBottom(element) {
        if (element) element.scrollTop = element.scrollHeight;
    }

    // --- X·ª≠ l√Ω Ph·∫£n h·ªìi AI cho Chat ---
    function processResponseQueue() {
        if (isMyIuTyping || responseQueue.length === 0) {
            if (!isMyIuTyping && responseQueue.length === 0 && document.getElementById('chat-interface').classList.contains('active')) {
                 if (typingCursor) typingCursor.style.display = 'inline-block';
                 if (aiResponseIndicator) aiResponseIndicator.classList.add('hidden');
            }
            return;
        }

        isMyIuTyping = true;
        if (typingCursor) typingCursor.style.display = 'none';
        if (aiResponseIndicator) aiResponseIndicator.classList.remove('hidden');

        const text = responseQueue.shift();
        const p = document.createElement('p');
        p.classList.add('myiu-response');
        p.textContent = '';
        
        if (consoleOutput && currentTypingLine) {
            consoleOutput.insertBefore(p, currentTypingLine);
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ consoleOutput ho·∫∑c currentTypingLine. Kh√¥ng th·ªÉ th√™m ph·∫£n h·ªìi.");
            isMyIuTyping = false;
            return;
        }

        let i = 0;
        playSFX('typing', true);
        const interval = setInterval(() => {
            if (p.textContent && i < text.length) {
                p.textContent += text.charAt(i);
                i++;
                autoScrollToBottom(consoleOutput);
            } else {
                clearInterval(interval);
                stopSFX('typing');
                isMyIuTyping = false;
                if (aiResponseIndicator) aiResponseIndicator.classList.add('hidden');
                if (document.getElementById('chat-interface').classList.contains('active')) {
                    if (typingCursor) typingCursor.style.display = 'inline-block';
                }
                playSFX('chime');
                speakResponse(text);
                setTimeout(processResponseQueue, 200);
            }
        }, 30);
    }
    function addResponse(message) {
        responseQueue.push(message);
        if (!isMyIuTyping) processResponseQueue();
    }

    // --- Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ---
    function speakResponse(text) {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'vi-VN'; 
            utterance.rate = 0.95; // T·ªëc ƒë·ªô h∆°i ch·∫≠m l·∫°i ƒë·ªÉ t·ª± nhi√™n h∆°n
            utterance.pitch = 1.05; // Cao ƒë·ªô h∆°i cao h∆°n ƒë·ªÉ d·ªÖ th∆∞∆°ng h∆°n

            const setVoice = () => {
                const voices = window.speechSynthesis.getVoices();
                const vietnameseVoice = voices.find(voice => voice.lang === 'vi-VN' && (voice.name.includes('Google ti·∫øng Vi·ªát') || voice.name.includes('Female'))); 
                if (vietnameseVoice) {
                    utterance.voice = vietnameseVoice;
                    console.log("ƒê√£ ch·ªçn gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát:", vietnameseVoice.name);
                } else {
                    console.warn("Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát t√πy ch·ªânh (ho·∫∑c gi·ªçng n·ªØ). S·∫Ω d√πng gi·ªçng m·∫∑c ƒë·ªãnh.");
                    voices.forEach(voice => console.log(`- ${voice.name} (${voice.lang})`));
                }
                window.speechSynthesis.speak(utterance);
            };

            if (window.speechSynthesis.getVoices().length === 0) {
                window.speechSynthesis.onvoiceschanged = setVoice;
            } else {
                setVoice();
            }
            
        } else {
            console.warn("Tr√¨nh t·ªïng h·ª£p gi·ªçng n√≥i kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong tr√¨nh duy·ªát n√†y.");
        }
    }

    // --- X·ª≠ l√Ω L·ªánh Ng∆∞·ªùi d√πng ---
    const availableCommands = [ // Danh s√°ch l·ªánh c√≥ s·∫µn cho autocomplete v√† x·ª≠ l√Ω
        'ch√†o', 'tr·∫°ng th√°i', 'nh·∫≠t k√Ω', 'thi·∫øt b·ªã ƒë·∫ßu cu·ªëi', 'terminal', 'to√†n m√†n h√¨nh', 'fullscreen', 'l·ªói',
        'ch·ªß ƒë·ªÅ cyan', 'ch·ªß ƒë·ªÅ t√≠m', 'ch·ªß ƒë·ªÅ cam', 'ch·∫ø ƒë·ªô t√†ng h√¨nh', 'stealth mode',
        'help', 'status', 'ls', 'ping', 'reboot', 'exit' // L·ªánh ti·∫øng Anh cho terminal
    ];

    function handleCommandSend() {
        const commandText = commandInput.value.trim();
        if (commandText === '') return;

        if (typingCursor) typingCursor.style.display = 'none';

        const p = document.createElement('p');
        p.classList.add('user-command');
        p.textContent = `$ ${commandText}`;
        if (consoleOutput && currentTypingLine) {
            consoleOutput.insertBefore(p, currentTypingLine);
            autoScrollToBottom(consoleOutput);
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ consoleOutput ho·∫∑c currentTypingLine ƒë·ªÉ hi·ªÉn th·ªã l·ªánh.");
            return;
        }
        playSFX('beep');
        commandInput.blur();

        setTimeout(() => {
            let responseMsg = `L·ªánh '${commandText}' ƒë√£ nh·∫≠n. ƒêang x·ª≠ l√Ω... Vui l√≤ng ch·ªù.`;
            let isHandled = false;

            if (commandText.toLowerCase().includes("ch√†o myiu") || commandText.toLowerCase().includes("xin ch√†o")) {
                responseMsg = "Ch√†o Ch·ªâ huy! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?";
                isHandled = true;
            } else if (commandText.toLowerCase().includes("tr·∫°ng th√°i h·ªá th·ªëng") || commandText.toLowerCase() === "tr·∫°ng th√°i") {
                responseMsg = "T·∫•t c·∫£ h·ªá th·ªëng c·ªët l√µi ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng. S·ª©c m·∫°nh x·ª≠ l√Ω ·ªü m·ª©c 85%.";
                openDetailPanel({ // S·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p
                    soma: 'B√åNH Tƒ®NH', memory_count: 382, cpu: 25, ram: { used: 12, total: 32 },
                    temp: 35, network: 1.2, fps: 60, energy: 98
                });
                isHandled = true;
            } else if (commandText.toLowerCase().includes("nh·∫≠t k√Ω") || commandText.toLowerCase().includes("xem log")) {
                responseMsg = "Chuy·ªÉn h∆∞·ªõng ƒë·∫øn Nh·∫≠t k√Ω h·ªá th·ªëng. Xem c√°c m·ª•c g·∫ßn ƒë√¢y trong tab 'Nh·∫≠t k√Ω h·ªá th·ªëng'.";
                addSystemLog('TH√îNG TIN', 'Ng∆∞·ªùi d√πng y√™u c·∫ßu nh·∫≠t k√Ω h·ªá th·ªëng.');
                navButtons.forEach(btn => { if (btn.dataset.target === 'system-logs') btn.click(); });
                isHandled = true;
            } else if (commandText.toLowerCase().includes("thi·∫øt b·ªã ƒë·∫ßu cu·ªëi") || commandText.toLowerCase().includes("m·ªü terminal")) {
                responseMsg = "K√≠ch ho·∫°t l·ªõp ph·ªß CLI an to√†n. G√µ 'tho√°t' ƒë·ªÉ ƒë√≥ng.";
                toggleFullScreenTerminal();
                isHandled = true;
            } else if (commandText.toLowerCase().includes("to√†n m√†n h√¨nh")) { 
                responseMsg = "ƒêang chuy·ªÉn ƒë·ªïi sang Ch·∫ø ƒë·ªô Terminal to√†n m√†n h√¨nh.";
                toggleFullScreenTerminal();
                isHandled = true;
            } else if (commandText.toLowerCase().includes("l·ªói") || commandText.toLowerCase().includes("v·∫•n ƒë·ªÅ h·ªá th·ªëng")) {
                responseMsg = "ƒê√£ x√°c nh·∫≠n. ƒêang m√¥ ph·ªèng m·ªôt s·ª± c·ªë nh·ªè c·ªßa h·ªá th·ªëng ƒë·ªÉ minh h·ªça.";
                addSystemLog('L·ªñI', 'M√¥ ph·ªèng l·ªói nghi√™m tr·ªçng trong ' + (new Date()).getMilliseconds() + 'ms.');
                updateAIStatusBar('L·ªñI', 10, 'L·ªói nghi√™m tr·ªçng m√¥ ph·ªèng!');
                if (navigator.vibrate) { navigator.vibrate([100, 30, 100]); } // Rung nh·∫π khi c·∫£nh b√°o l·ªói
                isHandled = true;
            } else if (commandText.toLowerCase().includes("ch·ªß ƒë·ªÅ cyan")) {
                setTheme('cyan');
                responseMsg = "ƒê√£ chuy·ªÉn sang ch·ªß ƒë·ªÅ Cyan.";
                isHandled = true;
            } else if (commandText.toLowerCase().includes("ch·ªß ƒë·ªÅ t√≠m")) {
                setTheme('purple');
                responseMsg = "ƒê√£ chuy·ªÉn sang ch·ªß ƒë·ªÅ T√≠m.";
                isHandled = true;
            } else if (commandText.toLowerCase().includes("ch·ªß ƒë·ªÅ cam")) {
                setTheme('orange');
                responseMsg = "ƒê√£ chuy·ªÉn sang ch·ªß ƒë·ªÅ Cam.";
                isHandled = true;
            } else if (commandText.toLowerCase().includes("ch·∫ø ƒë·ªô t√†ng h√¨nh") || commandText.toLowerCase().includes("stealth mode")) {
                setTheme('stealth');
                responseMsg = "ƒê√£ k√≠ch ho·∫°t Ch·∫ø ƒë·ªô T√†ng h√¨nh.";
                isHandled = true;
            }

            if (!isHandled) { // G·ª£i √Ω l·ªánh m·∫´u theo th·ªùi ƒëi·ªÉm trong ng√†y (n·∫øu ch∆∞a c√≥ l·ªánh ƒë·∫∑c bi·ªát n√†o ƒë∆∞·ª£c x·ª≠ l√Ω)
                const hour = new Date().getHours();
                if (hour >= 6 && hour < 12) { // S√°ng
                    responseMsg += "\n> G·ª£i √Ω bu·ªïi s√°ng: Th·ª≠ g√µ 'tr·∫°ng th√°i' ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng ho·∫∑c 'nh·∫≠t k√Ω' ƒë·ªÉ xem c√°c ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y.";
                } else if (hour >= 18 || hour < 6) { // T·ªëi
                    responseMsg += "\n> G·ª£i √Ω bu·ªïi t·ªëi: Th·ª≠ g√µ 'an ninh' ƒë·ªÉ ki·ªÉm tra c√°c giao th·ª©c b·∫£o m·∫≠t ho·∫∑c 'ng·ªß' ƒë·ªÉ k√≠ch ho·∫°t ch·∫ø ƒë·ªô ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng.";
                }
            }


            addResponse(responseMsg);
            commandInput.focus();
        }, 500);

        if (commandText) commandHistory.unshift(commandText);
        historyIndex = -1;
        commandInput.value = '';
    }

    if (commandInput) {
        commandInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                handleCommandSend();
                e.preventDefault();
            } else if (e.key === 'ArrowUp') {
                if (historyIndex < commandHistory.length - 1) {
                    historyIndex++;
                    commandInput.value = commandHistory[historyIndex];
                    e.preventDefault();
                }
            } else if (e.key === 'ArrowDown') {
                if (historyIndex > 0) {
                    historyIndex--;
                    commandInput.value = commandHistory[historyIndex];
                } else {
                    historyIndex = -1;
                    commandInput.value = '';
                }
                e.preventDefault();
            } else {
                playSFX('key_press');
            }
        });

        // G·ª£i √Ω l·ªánh theo t·ª´ng ch·ªØ g√µ (autocomplete)
        commandInput.addEventListener('input', () => {
            const currentText = commandInput.value.toLowerCase();
            if (commandSuggestions) { // Check if element exists
                commandSuggestions.innerHTML = ''; // Clear old suggestions

                if (currentText.length > 0) {
                    const filteredSuggestions = availableCommands.filter(cmd => cmd.startsWith(currentText));
                    if (filteredSuggestions.length > 0) {
                        commandSuggestions.classList.remove('hidden');
                        filteredSuggestions.slice(0, 3).forEach(suggestion => { // Show max 3 suggestions
                            const span = document.createElement('span');
                            span.textContent = suggestion;
                            span.classList.add('px-2', 'py-0', 'mr-1', 'bg-gray-700/50', 'rounded-sm', 'cursor-pointer', 'hover:bg-gray-600');
                            span.addEventListener('click', () => {
                                commandInput.value = suggestion;
                                if (commandSuggestions) commandSuggestions.classList.add('hidden');
                                commandInput.focus();
                            });
                            suggestionsDiv.appendChild(span);
                        });
                    } else {
                        commandSuggestions.classList.add('hidden');
                    }
                } else {
                    commandSuggestions.classList.add('hidden');
                }
            }
        });
        commandInput.addEventListener('blur', () => {
            // ·∫®n g·ª£i √Ω sau khi input m·∫•t focus, v·ªõi ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ click ƒë∆∞·ª£c g·ª£i √Ω
            setTimeout(() => {
                if (commandSuggestions) commandSuggestions.classList.add('hidden');
            }, 150);
        });
    }

    if (sendCommandBtn) sendCommandBtn.addEventListener('click', handleCommandSend);
    
    // --- Logic B·∫£ng Chi ti·∫øt (cho Ch·ªâ s·ªë H·ªá th·ªëng) ---
    function openDetailPanel(metrics) {
        if (!detailPanel) {
            console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ Detail Panel. Kh√¥ng th·ªÉ m·ªü.");
            return;
        }
        detailPanel.classList.remove('hidden'); // Hi·ªÉn th·ªã n√≥ (display: flex)
        detailPanel.classList.add('active'); // K√≠ch ho·∫°t animation tr∆∞·ª£t l√™n

        // ƒê·ªï d·ªØ li·ªáu v√†o b·∫£ng chi ti·∫øt
        updateStatusMetrics(metrics);
    }

    if (closeDetailPanelBtn) {
        closeDetailPanelBtn.addEventListener('click', () => {
            if (detailPanel) detailPanel.classList.remove('active'); // T·∫Øt animation tr∆∞·ª£t l√™n
            setTimeout(() => {
                if (detailPanel) detailPanel.classList.add('hidden'); // ·∫®n sau khi animation ho√†n t·∫•t
            }, 300); // Kh·ªõp v·ªõi th·ªùi gian transition c·ªßa CSS
        });
    }

    // --- Logic L·ªõp ph·ªß Terminal ---
    function openTerminalOverlay() {
        if (terminalOverlay) {
            terminalOverlay.classList.remove('hidden');
            setTimeout(() => terminalOverlay.style.opacity = '1', 10);
            if (terminalInput) terminalInput.focus();
            playSFX('terminal_beep');
            if (typingCursorTerminal) typingCursorTerminal.style.display = 'inline-block';
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ l·ªõp ph·ªß Terminal.");
        }
    }

    function closeTerminalOverlay() {
        if (terminalOverlay) {
            terminalOverlay.style.opacity = '0';
            setTimeout(() => {
                terminalOverlay.classList.add('hidden');
            }, 300);
            if (commandInput) commandInput.focus();
            stopSFX('typing');
            if (typingCursorTerminal) typingCursorTerminal.style.display = 'none';
        }
    }

    if (closeTerminalBtn) closeTerminalBtn.addEventListener('click', closeTerminalOverlay);
    function toggleFullScreenTerminal() { 
        if (terminalOverlay && terminalOverlay.classList.contains('hidden')) {
            openTerminalOverlay();
        } else {
            closeTerminalOverlay();
        }
    }


    if (terminalInput) {
        terminalInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const termCommand = terminalInput.value.trim();
                if (termCommand === '') return;

                const p = document.createElement('p');
                p.innerHTML = `<span class="text-green-400">myiu@core</span>:~ $ ${termCommand}`;
                if (terminalOutput && typingCursorTerminal) {
                    terminalOutput.insertBefore(p, typingCursorTerminal.parentElement);
                    autoScrollToBottom(terminalOutput);
                } else {
                    console.warn("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ output Terminal ƒë·ªÉ hi·ªÉn th·ªã l·ªánh.");
                    return;
                }
                playSFX('terminal_beep');

                if (termCommand.toLowerCase().includes("help")) {
                    addTerminalResponse("C√°c l·ªánh c√≥ s·∫µn: 'tr·∫°ng th√°i', 'ping [ip]', 'ls', 'kh·ªüi ƒë·ªông l·∫°i', 'tho√°t'");
                } else if (termCommand.toLowerCase().includes("tr·∫°ng th√°i")) {
                    addTerminalResponse("Th·ªùi gian ho·∫°t ƒë·ªông h·ªá th·ªëng: 247 ng√†y, 14 gi·ªù, 33 ph√∫t");
                    addTerminalResponse("Nhi·ªát ƒë·ªô l√µi: 35.7¬∞C");
                    addTerminalResponse("S·ª≠ d·ª•ng b·ªô nh·ªõ: 38% (12GB/32GB)");
                } else if (termCommand.toLowerCase().startsWith('ping')) {
                    addTerminalResponse("ƒêang ping m·ª•c ti√™u... (M√¥ ph·ªèng)");
                    setTimeout(() => addTerminalResponse("Ph·∫£n h·ªìi t·ª´ 192.168.1.1: bytes=32 time=5ms TTL=64"), 500);
                } else if (termCommand.toLowerCase() === 'ls') {
                    addTerminalResponse("core_modules.sys  log_archive/  config.json  user_data/");
                } else if (termCommand.toLowerCase() === 'kh·ªüi ƒë·ªông l·∫°i') {
                    addTerminalResponse("ƒêang kh·ªüi t·∫°o tr√¨nh t·ª± kh·ªüi ƒë·ªông l·∫°i... H·ªá th·ªëng s·∫Ω t·∫°m th·ªùi ngo·∫°i tuy·∫øn.");
                    setTimeout(() => {
                        closeTerminalOverlay();
                        addResponse("MyIu Core ƒëang kh·ªüi ƒë·ªông l·∫°i... Vui l√≤ng ch·ªù.");
                        updateAIStatusBar('NGO·∫†I TUY·∫æN', 0, 'ƒêang kh·ªüi ƒë·ªông l·∫°i...');
                        setTimeout(() => {
                            addResponse("MyIu Core ƒë√£ kh·ªüi ƒë·ªông l·∫°i v√† tr·ª±c tuy·∫øn.");
                            updateAIStatusBar('TR·ª∞C TUY·∫æN', 100);
                        }, 5000);
                    }, 1000);
                } else if (termCommand.toLowerCase() === 'tho√°t') {
                    addTerminalResponse("Tho√°t CLI. Phi√™n ƒë√£ k·∫øt th√∫c.");
                    closeTerminalOverlay();
                } else {
                    addTerminalResponse(`Kh√¥ng t√¨m th·∫•y l·ªánh: '${termCommand}'. G√µ 'help' ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`);
                }

                terminalHistory.unshift(termCommand);
                terminalHistoryIndex = -1;
                terminalInput.value = '';
            } else if (e.key === 'ArrowUp') {
                if (terminalHistoryIndex < terminalHistory.length - 1) {
                    terminalHistoryIndex++;
                    terminalInput.value = terminalHistory[terminalHistoryIndex];
                    e.preventDefault();
                }
            } else if (e.key === 'ArrowDown') {
                if (terminalHistoryIndex > 0) {
                    historyIndex--;
                    terminalInput.value = terminalHistory[terminalHistoryIndex];
                } else {
                    historyIndex = -1;
                    terminalInput.value = '';
                }
                e.preventDefault();
            } else {
                playSFX('key_press');
            }
        });
    }


    function addTerminalResponse(message) {
        terminalResponseQueue.push(message);
        if (!isTerminalTyping) processTerminalResponseQueue();
    }

    function processTerminalResponseQueue() {
        if (isTerminalTyping || terminalResponseQueue.length === 0) {
            if (!isTerminalTyping && terminalResponseQueue.length === 0) {
                if (typingCursorTerminal) typingCursorTerminal.style.display = 'inline-block';
            }
            return;
        }

        isTerminalTyping = true;
        if (typingCursorTerminal) typingCursorTerminal.style.display = 'none';

        const text = terminalResponseQueue.shift();
        const p = document.createElement('p');
        p.textContent = '';
        if (terminalOutput && typingCursorTerminal) {
            terminalOutput.insertBefore(p, typingCursorTerminal.parentElement);
            autoScrollToBottom(terminalOutput);
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ output Terminal ƒë·ªÉ hi·ªÉn th·ªã ph·∫£n h·ªìi.");
            isTerminalTyping = false;
            return;
        }

        let i = 0;
        playSFX('typing', true);
        const interval = setInterval(() => {
            if (p.textContent && i < text.length) {
                p.textContent += text.charAt(i);
                i++;
                autoScrollToBottom(terminalOutput);
            } else {
                clearInterval(interval);
                stopSFX('typing');
                isTerminalTyping = false;
                if (typingCursorTerminal) typingCursorTerminal.style.display = 'inline-block';
                setTimeout(processTerminalResponseQueue, 100);
            }
        }, 15);
    }


    function drawSystemGraph() {
        const canvas = document.getElementById('system-graph-placeholder');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const parentDiv = canvas.parentElement;
        
        if (canvas.width !== parentDiv.offsetWidth || canvas.height !== parentDiv.offsetHeight) {
            canvas.width = parentDiv.offsetWidth;
            canvas.height = parentDiv.offsetHeight;
        }

        const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
        gradient.addColorStop(0, 'rgba(0, 255, 204, 0.2)');
        gradient.addColorStop(0.5, 'rgba(128, 90, 213, 0.4)');
        gradient.addColorStop(1, 'rgba(0, 255, 204, 0.2)');

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = gradient;
        ctx.lineWidth = 2;
        ctx.shadowColor = '#00ffcc';
        ctx.shadowBlur = 5;

        const dataPoints = 80;
        const baseHeight = canvas.height / 2;
        const amplitude = canvas.height / 4;

        ctx.beginPath();
        ctx.moveTo(0, baseHeight + Math.sin(0) * amplitude);

        for (let i = 0; i < dataPoints; i++) {
            const x = (i / (dataPoints - 1)) * canvas.width;
            const y = baseHeight + Math.sin(i * 0.3 + Date.now() * 0.002) * amplitude * (0.8 + Math.random() * 0.4);
            ctx.lineTo(x, y);
        }
        ctx.stroke();
        ctx.shadowBlur = 0;
    }
    
    let graphInterval;
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetId = button.dataset.target;
            localStorage.setItem('activeTabId', targetId);

            console.log("N√∫t tab ƒë√£ ƒë∆∞·ª£c nh·∫•p:", targetId);

            contentPanels.forEach(panel => {
                if (panel.classList.contains('active')) {
                    console.log(`ƒêang ·∫©n panel: ${panel.id}`);
                    panel.classList.remove('active');
                    panel.style.display = 'none'; 
                    panel.style.pointerEvents = 'none';
                }
            });

            const targetPanel = document.getElementById(targetId);
            if (targetPanel) {
                console.log(`ƒêang hi·ªÉn th·ªã panel: ${targetId}`);
                targetPanel.classList.add('active');
                targetPanel.style.display = 'flex'; 
                targetPanel.style.pointerEvents = 'auto';

                navButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
            } else {
                console.error(`Kh√¥ng t√¨m th·∫•y panel m·ª•c ti√™u v·ªõi ID ${targetId}!`);
            }

            if (targetId === 'data-visuals') {
                if (!graphInterval) {
                    graphInterval = setInterval(drawSystemGraph, 50);
                }
            } else {
                if (graphInterval) {
                    clearInterval(graphInterval);
                    graphInterval = null;
                }
            }
            if (detailPanel && detailPanel.classList.contains('active')) {
                closeDetailPanelBtn.click();
            }
        });
    });

    const initialThoughts = [
        { source: 'Cortex', message: 'ƒêang ph√¢n t√≠ch m·∫´u t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o ph·∫£n h·ªìi t·ªëi ∆∞u.' },
        { source: 'Foreman', message: 'H√†ng ƒë·ª£i t√°c v·ª•: Gi√°m s√°t s·ª©c kh·ªèe h·ªá th·ªëng; x·ª≠ l√Ω c√°c l·ªánh m√¥ ph·ªèng; t·∫°o d·ªØ li·ªáu nh·∫≠t k√Ω gi·∫£.' },
        { source: 'MemoryBank', message: 'ƒêang truy c·∫≠p d·ªØ li·ªáu ng·ªØ c·∫£nh t·ª´ nh·∫≠t k√Ω t∆∞∆°ng t√°c tr∆∞·ªõc. ƒêang truy xu·∫•t t√πy ch·ªçn c·ªßa ng∆∞·ªùi d√πng.' },
        { source: 'NeuronNet', message: 'ƒêang ch·∫°y giao th·ª©c t·ª± ch·∫©n ƒëo√°n. T·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n th·∫ßn kinh ƒë·ªÅu b√¨nh th∆∞·ªùng.' },
        { source: 'DataForge', message: 'ƒêang t·ªïng h·ª£p d·ªØ li·ªáu m√¥i tr∆∞·ªùng th·ªùi gian th·ª±c. X√°c nh·∫≠n s·ª± ·ªïn ƒë·ªãnh kh√≠ quy·ªÉn.' }
    ];

    let initialThoughtIndex = 0;
    function addInitialThoughtDelayed() {
        if (initialThoughtIndex < initialThoughts.length) {
            addThought(initialThoughts[initialThoughtIndex].source, initialThoughts[initialThoughtIndex].message);
            initialThoughtIndex++;
            setTimeout(addInitialThoughtDelayed, 3000);
        }
    }

    // --- Qu·∫£n l√Ω ch·ªß ƒë·ªÅ m√†u s·∫Øc ---
    function setTheme(themeName) {
        document.body.className = ''; // X√≥a t·∫•t c·∫£ c√°c class ch·ªß ƒë·ªÅ hi·ªán c√≥
        document.body.classList.add(`theme-${themeName}`);
        localStorage.setItem('activeTheme', themeName); // L∆∞u ch·ªß ƒë·ªÅ v√†o localStorage
        console.log("ƒê√£ chuy·ªÉn ch·ªß ƒë·ªÅ sang:", themeName);
    }

    // Kh·ªüi t·∫°o ch·ªß ƒë·ªÅ t·ª´ localStorage khi t·∫£i trang
    const savedTheme = localStorage.getItem('activeTheme');
    if (savedTheme) {
        setTheme(savedTheme);
    } else {
        setTheme('cyan'); // Ch·ªß ƒë·ªÅ m·∫∑c ƒë·ªãnh
    }

    function connectWebSocket() {
        socket = new WebSocket(WS_URL);

        socket.onopen = () => {
            addThought('H·ªÜ TH·ªêNG', 'K·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p. MyIu ƒë√£ tr·ª±c tuy·∫øn.');
            updateStatusMetrics({ soma: 'IDLE', memory_count: 382, cpu: 25, ram: { used: 12, total: 32 }, temp: 35, energy: 98, task: 'Ch·ªù L·ªánh', network: 1.2, fps: 60 });
            updateAIStatusBar('TR·ª∞C TUY·∫æN', 100);
            
            const targetButton = document.querySelector(`#bottom-nav .nav-btn[data-target="${activeTabId}"]`);
            if (targetButton) {
                console.log("K√≠ch ho·∫°t tab ban ƒë·∫ßu t·ª´ localStorage:", activeTabId);
                targetButton.click();
            } else {
                console.warn(`activeTabId "${activeTabId}" ƒë∆∞·ª£c l∆∞u tr·ªØ kh√¥ng t√¨m th·∫•y. M·∫∑c ƒë·ªãnh l√† giao di·ªán tr√≤ chuy·ªán.`);
                document.querySelector('#bottom-nav .nav-btn[data-target="chat-interface"]').click();
            }

            addInitialThoughtDelayed();
        };

        socket.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                switch (data.type) {
                    case 'thought':
                        addThought(data.source, data.message);
                        break;
                    case 'status':
                        updateStatusMetrics(data.payload); 
                        if (data.payload.soma) {
                            let aiCurrentStatus = 'TR·ª∞C TUY·∫æN';
                            if (data.payload.soma === 'THINKING' || data.payload.soma === 'ANALYZING') aiCurrentStatus = 'ƒêANG G·ª† L·ªñI';
                            if (data.payload.soma === 'STRESSED' || data.payload.soma === 'CONFUSED') aiCurrentStatus = 'L·ªñI';
                            updateAIStatusBar(aiCurrentStatus, 80 + Math.floor(Math.random() * 20), data.payload.alert);
                        }
                        if (data.payload.task && data.payload.task !== 'IDLE') {
                            addSystemLog('TH√îNG TIN', `T√°c v·ª• MyIu ƒë√£ thay ƒë·ªïi th√†nh: ${data.payload.task}`);
                        }
                        break;
                    case 'response':
                        addResponse(data.message);
                        break;
                    case 'ai_system_status':
                        updateAIStatusBar(data.status, data.power, data.alert);
                        if (data.alert) addSystemLog('C·∫¢NH B√ÅO', `C·∫£nh b√°o h·ªá th·ªëng: ${data.alert}`);
                        break;
                    case 'log':
                        addSystemLog(data.level, data.message);
                        break;
                    default:
                        addThought('KH√îNG R√ï', event.data);
                }
            } catch (e) {
                addThought('TH√î', event.data);
                console.error("L·ªói ph√¢n t√≠ch tin nh·∫Øn WebSocket:", e, event.data);
            }
        };

        socket.onclose = () => {
            addThought('H·ªÜ TH·ªêNG', 'M·∫•t k·∫øt n·ªëi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
            updateStatusMetrics({ soma: 'NGO·∫†I TUY·∫æN', memory_count: 'N/A', cpu: 'N/A', ram: { used: 'N/A', total: 'N/A' }, temp: 'N/A', energy: 'N/A' });
            updateAIStatusBar('NGO·∫†I TUY·∫æN', 0, 'M·∫•t k·∫øt n·ªëi v·ªõi L√µi!');
            addSystemLog('L·ªñI', 'K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i sau 5s.');
            stopSFX('typing');
            setTimeout(connectWebSocket, 5000);
        };

        socket.onerror = (error) => {
            console.error("L·ªói WebSocket:", error);
            addThought('H·ªÜ TH·ªêNG', 'ƒê√£ x·∫£y ra l·ªói v·ªõi k·∫øt n·ªëi.');
            updateAIStatusBar('L·ªñI', 0, 'L·ªói WebSocket!');
            addSystemLog('L·ªñI', 'L·ªói WebSocket ƒë∆∞·ª£c ph√°t hi·ªán: ' + error.message);
            stopSFX('typing');
        };
    }

    let touchstartX = 0;
    let touchendX = 0;
    const mainContentArea = document.getElementById('main-content-area');

    function checkSwipe() {
        if (window.innerWidth >= 1024) return;

        const minSwipeDistance = 50;
        const currentActiveBtn = document.querySelector('#bottom-nav .nav-btn.active');
        if (!currentActiveBtn) return;

        const navButtonsArray = Array.from(navButtons);
        const currentIndex = navButtonsArray.indexOf(currentActiveBtn);
        if (currentIndex === -1) return;

        if (touchendX < touchstartX - minSwipeDistance) {
            const nextIndex = (currentIndex + 1) % navButtonsArray.length;
            console.log("Vu·ªët sang tr√°i, ƒëang th·ª≠ nh·∫•p tab:", navButtonsArray[nextIndex].dataset.target);
            navButtonsArray[nextIndex].click();
        }
        if (touchendX > touchstartX + minSwipeDistance) {
            const prevIndex = (currentIndex - 1 + navButtonsArray.length) % navButtonsArray.length;
            console.log("Vu·ªët sang ph·∫£i, ƒëang th·ª≠ nh·∫•p tab:", navButtonsArray[prevIndex].dataset.target);
            navButtonsArray[prevIndex].click();
        }
    }

    if (mainContentArea) {
        mainContentArea.addEventListener('touchstart', e => {
            touchstartX = e.changedTouches[0].screenX;
        }, false);

        mainContentArea.addEventListener('touchend', e => {
            touchendX = e.changedTouches[0].screenX;
            checkSwipe();
        }, false);
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ mainContentArea. C·ª≠ ch·ªâ vu·ªët b·ªã t·∫Øt.");
    }


    connectWebSocket();

    if (document.getElementById('chat-interface').classList.contains('active') && commandInput) {
        commandInput.focus();
        if (typingCursor) typingCursor.style.display = 'inline-block';
    } else {
        console.warn("Giao di·ªán tr√≤ chuy·ªán kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p l·ªánh khi t·∫£i ban ƒë·∫ßu.");
    }

});
